{"version":3,"sources":["api/habit.js","api/tower.js","HabitTab.js","HabitContainer.js","App.js","serviceWorker.js","index.js"],"names":["Habit","name","goal","successRate","ease","current","console","log","this","n","parseInt","grade","decreaseEase","Math","max","increaseEase","ceil","pow","e","_ease","loaded","push","interceptor","set","obj","prop","value","a","async","updateDB","habits","then","catch","map","h","export","newHabit","opts","inner","wrapped","Proxy","getGoal","bind","increment","cron","get","array","i","length","createContext","HabitTab","habit","useState","delta","setDelta","onChange","target","type","onClick","preventDefault","App","setName","useContext","HabitContext","tab","setTab","Tabs","val","indicatorColor","textColor","centered","Tab","key","label","Box","my","padding","Container","maxWidth","Paper","addHabit","setHabits","useEffect","Provider","HabitContainer","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1366da9d.chunk.js","sourcesContent":["const easeFactor = 0.5;\nconst minimumEase = 1.3;\nexport class Habit {\n    constructor({ name, goal = 1, successRate = 0.85, ease = 2, current = 0 }) {\n        console.log(ease);\n        this.name = name;\n        this.goal = goal;\n        this.successRate = successRate;\n        this.ease = ease || 2;\n        this.current = current;\n        console.log('ease is 2? ', this.ease);\n    }\n    export() {\n        return {\n            name: this.name,\n            goal: this.goal,\n            successRate: this.successRate,\n            ease: this.ease,\n            current: this.current,\n        };\n    }\n\n    increment(n) {\n        console.log();\n        this.current += parseInt(n);\n    }\n\n    cron(grade) {\n        grade = parseInt(grade);\n        // grade represents how easy the previous day's work was\n        // 0 : sore\n        // 1 : stiffer than usual\n        // 2 : easy peasy\n        // false : cannot judge due to other activities\n        if (grade !== false && this.current < this.goal) {\n            grade = 0; // if I don't have enough time to complete, also counts as a fail\n        }\n        // update ease to effective ease (if you overshot your goal)\n        console.log('000000000');\n        console.log(this.ease);\n        console.log(this.current / this.goal);\n        this.ease *= this.current / this.goal;\n        console.log(this.ease);\n        console.log('000000000');\n        switch (grade) {\n            case false:\n                break;\n            case 0:\n                // sore?\n                // decrease ease\n                this.decreaseEase();\n                this.goal = 1;\n                break;\n            case 1:\n                // stiff?\n                // don't change ease\n                this.goal = Math.max(this.goal, this.current) * this.ease;\n                break;\n            case 2:\n                // easy?\n                // increase ease\n                this.increaseEase();\n                // update goal\n                console.log(this.goal);\n                console.log(this.current);\n                console.log(this.ease);\n                this.goal = Math.max(this.goal, this.current) * this.ease;\n                break;\n            default:\n                console.log('unknown grade ', grade);\n                break;\n        }\n        // always reset current\n        this.current = 0;\n    }\n    getGoal() {\n        return Math.ceil(this.goal);\n    }\n\n    set ease(e) {\n        this._ease = Math.max(e, minimumEase);\n    }\n    get ease() {\n        return this._ease;\n    }\n\n    decreaseEase() {\n        this.ease = this.ease * easeFactor;\n    }\n    increaseEase() {\n        this.ease = this.ease * Math.pow(easeFactor, 1 - 1 / this.successRate);\n    }\n}\n\n/*\nWhat do I need to create my habit?\nI need to know what I am repeatedly doing : name\nI need to know how often I want to fail\nand how much to adjust my goal on a fail/success : successRate / successAdjust-Bonus?\nTrack current goal : goal\nHow much did I already do today : current\nHow much did I do yesterday to assess fail/success? Or just manually cron, so use current for this too\n-----------\nWhat can I do with my habit?\nI can do it! n times : increment(n)\nI can score how well I did yesterday : cron(success/fail/unsure)\nI can rename it : setName(name)\nI can adjust how often I want to succeed/how much I want to adjust my goal\nI can get information about the habit to display\nI can export the constructing object to store in indexedDB\n\nI should only change max internally\n\n*/\n","import { set, get } from 'idb-keyval';\nimport { Habit } from './habit';\nimport {createContext} from 'react';\nvar loaded = false;\nvar push = () => {};\nconst HABITS_KEY = 'HABIT_OBJECTS_ARRAY';\nconst interceptor = {\n    set: async function(obj, prop, value) {\n        if (!loaded) {\n            return;\n        }\n        obj[prop] = value;\n        await updateDB(habits)\n            .then(() => true)\n            .catch(e => {\n                return false;\n            });\n    },\n};\n\nvar habits = [];\nloadFromDB().then(() => {\n    // only start intercepting changes to the habits array\n    // after it has been loaded from state\n    habits = new Proxy(habits, interceptor);\n    push(habits);\n    loaded = true;\n});\n\nfunction loadFromDB() {\n    return get(HABITS_KEY)\n        .then(array => {\n            if (!array) {\n                return;\n            }\n            for (var i = 0; i < array.length; i++) {\n                habits[i] = newHabit(array[i]);\n            }\n        })\n        .catch(e => console.log(e));\n}\n\nfunction updateDB(habits) {\n    return set(\n        HABITS_KEY,\n        habits.map(h => h.export())\n    ).then(() => {\n        push(habits);\n    });\n}\n\nfunction newHabit(opts) {\n    var inner = new Habit(opts);\n    var wrapped = new Proxy(inner, interceptor);\n    inner.getGoal = inner.getGoal.bind(wrapped);\n    inner.increment = inner.increment.bind(wrapped);\n    inner.cron = inner.cron.bind(wrapped);\n    return wrapped;\n}\n\nexport function addHabit(name) {\n    // add new habit here\n    const habit = newHabit({ name });\n    habits.push(habit);\n    return habit;\n}\n\nexport function getHabits(callback) {\n    push = callback || (() => {});\n    // return array of Habit objects\n    return habits;\n}\n\nexport default createContext(habits);\n","import React, { useState } from 'react';\n\nexport default function HabitTab({\n    habit: { name, current, getGoal, increment, cron },\n}) {\n    const [delta, setDelta] = useState(0);\n    return (\n        <div>\n            <div>\n                <p>{name}</p>\n                <p>You have done {current} today</p>\n                <p>Your goal for today is {getGoal()}</p>\n            </div>\n            <input\n                onChange={e => setDelta(e.target.value)}\n                value={delta}\n                type=\"number\"\n            />\n            <button\n                onClick={e => {\n                    e.preventDefault();\n                    increment(delta);\n                }}\n            >\n                Increment\n            </button>\n            <div>\n                Score yesterday's work!\n                <button\n                    onClick={e => {\n                        e.preventDefault();\n                        cron(2);\n                    }}\n                >\n                    Easy\n                </button>\n                <button\n                    onClick={e => {\n                        e.preventDefault();\n                        cron(1);\n                    }}\n                >\n                    Okay\n                </button>\n                <button\n                    onClick={e => {\n                        e.preventDefault();\n                        cron(0);\n                    }}\n                >\n                    I'm sore\n                </button>\n                <button\n                    onClick={e => {\n                        e.preventDefault();\n                        cron(-1);\n                    }}\n                >\n                    Just reset\n                </button>\n            </div>\n        </div>\n    );\n}\n","import './App.css';\n\nimport React, { useState, useContext } from 'react';\nimport { Box, Container, Paper, Tab, Tabs } from '@material-ui/core';\nimport HabitTab from './HabitTab';\nimport HabitContext, { addHabit } from './api/tower';\n\nfunction App() {\n    const [name, setName] = useState('');\n    const habits = useContext(HabitContext);\n    const [tab, setTab] = useState(0);\n    function handleChange(e, val) {\n        setTab(val);\n    }\n    return (\n        <>\n            <Tabs\n                value={habits.length ? tab : 'new'}\n                onChange={handleChange}\n                indicatorColor=\"primary\"\n                textColor=\"primary\"\n                centered\n            >\n                {habits &&\n                    habits.map((habit, i) => (\n                        <Tab key={i} label={habit.name} />\n                    ))}\n                <Tab value=\"new\" label={'Add new'} />\n            </Tabs>\n            <Box my=\"50px\" padding=\"20px\">\n                <Container maxWidth=\"md\">\n                    <Paper padding=\"20px\">\n                        <Box my=\"50px\" padding=\"20px\">\n                            {tab === 'new' || habits.length === 0 ? (\n                                <>\n                                    <input\n                                        value={name}\n                                        onChange={e => setName(e.target.value)}\n                                    />\n                                    <button\n                                        onClick={e => {\n                                            e.preventDefault();\n                                            addHabit(name);\n                                            setName('');\n                                        }}\n                                    >\n                                        Add New Habit\n                                    </button>\n                                </>\n                            ) : (\n                                <HabitTab\n                                    key={habits[tab].name}\n                                    habit={habits[tab]}\n                                />\n                            )}\n                        </Box>\n                    </Paper>\n                </Container>\n            </Box>\n        </>\n    );\n}\n\nexport default App;\n","import './App.css';\n\nimport React, { useState, useEffect } from 'react';\nimport HabitContext, { getHabits } from './api/tower';\nimport HabitContainer from './HabitContainer';\nfunction App() {\n    const [habits, setHabits] = useState([]);\n    useEffect(() => {\n        getHabits(h => setHabits([...h]));\n    }, []);\n    return (\n        <HabitContext.Provider value={habits}>\n            <HabitContainer />\n        </HabitContext.Provider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}